#+TITLE: Yet Another Static Site Generator
#+SUBTITLE: Overtime and overbudget
#+DATE: <2024-01-07 Sun 23:00>
#+UPDATED: <2025-02-15 Mon 23:00>
#+AUTHOR: Pior Klibert
#+OPTIONS: toc:nil 
#+STATE: DONE



TL;DR: as in the title, I'm making üéâ **Yet Another Static Site Generator** üéâ

This time in Emacs and Elisp... wait, actually, let's make it Elisp and Common
Lisp. There's a significant Python component, too. Well... at this point, why
limit myself? Let's go with:

‚≠ê Elisp + CL + Python + XSLT + Lua + Fennel + JavaScript + TypeScript + LessCSS ‚≠ê

Because... why not? :P Also, polyglot fits thematically. I'd add Kotlin to the
mix, if only I had some idea where to stuff it...


* Motivation and introduction

Longer version: this blog was previously generated with a custom Python-based
generator. I wrote it as an excercise - at the time, I was fascinated with
functional programming, and I used the blog generator to play with functional
features in Python, leveraging mainly ~funcy~ library. The code turned out
weird, but it worked, and I used it for years. However, the whole workflow was
optimized for publishing loooong and complex blog posts, and for every post,
setup time was substantial.

I realized that I need to eliminate as many barriers to publishing posts as
possible if I ever want to start publishing shorter content more often. I didn't
care for a long time, but recently, finding time to finish those looong and
complex posts became challenging. So, I decided to take a stab at integrating
the generator into my normal workflow. In other words, I decided to rewrite the
whole thing in Emacs Lisp.

I researched a bunch of existing solutions, the ones that appeared maintained:

- [[https://github.com/tumashu/org2web][org2web]]
- [[https://orgify.pages.dev/][orgify]]
- [[https://emacs.love/weblorg/][weblorg]]
- [[https://github.com/bastibe/org-static-blog/][org-static-blog]]

But none of them worked for me out of the box. Plus, my previous custom code did
a bunch of smarpid (smart + stupid) things that I'm not yet sure how to
replicate in Org, and of course none of the packages provide them.

I took inspiration from ~weblorg~, mostly, and in under 100 loc I managed to
write something that works just enough to post this information.

I initially planned to be done with the rewrite, complete with recovering older
posts, in a few evenings. It's been a year, and nothing has been done. So, in
February 2025, I'm undertaking another attempt to get the blog back up.

* Features

** Mostly working

- basic templating with [[https://github.com/clarete/templatel/][templatel]]
- using Org keywords as metadata (~#+TITLE:~, ~#+SUBTITLE:~, ~#+DATE:~, etc.)
- using Org keyword ~#+STATE~ to decide whether a post should be rendered
- main page with all posts rendered, ordered by date
- post pages, one post per page
- after-save-hook re-renders edited post
- automatically set ~CUSTOM_ID~ properties for the headlines, based on title
- Docker with OpenRESTY for local development
- tame ~org-attach~ so that the attached files are found after export
- make ~info:~ links render as links to web version (worked out of the box)
  
** To be done

- make an auto-generated "archive" page with links to all posts
- replace ~lambda~ with ~Œª~ character on export in code blocks
- make attached images not wider than main column and activate lightbox on them
- add a copy button beside code blocks that will copy the contents of a block
  but wrapped in some checks and instructions for users
- add a special link type to link to Emacs sources (mirror on GH after export)
- insert emacs version in the footer of source blocks
- estimate post reading time: 200 and 250 wpm is the average adult reading speed
- add ~--delete~ to ~rsync~ when uploading to the server (after *pages* work)
- maintain a history of changing titles, delete previous versions but redirect
  to new ones
- various elements CSS fixes (footnotes, blockquotes, nested lists, etc)
  - fix margins and padding in ~<ol>~ lists
  - some things to steal: http://alhassy.com/repl-driven-development
- start rendering pages (separately from posts)
- avoid re-exporting unchanged posts
- tangle code blocks into files on export
- handle static files copying (and preprocessing where needed) automatically
- update #+UPDATED: keyword on save
- add a special link type to link to Emacs sources (mirror on GH after export,
  checkout of the repo locally)
- configure Nginx to allow URLs without file extensions and enable content
  negotiation (as described in https://www.w3.org/Provider/Style/URI)
  - since I write posts in Org now exclusively, I want to allow clients to get
    the .org file if they want, instead of .html export
- make ffap in Emacs find org-attach files
- two different highlighting systems (Pygments with a table, Org mode with spans)
- images should never go outside the main column
- fix <ol> lists by removing excessive padding
- regenerate archive page in Elisp

- see what Python implementation did, and replicate the features in Elisp
  - JS and CSS compilation pipeline: minify, concatenate, etc
  - a list of published posts with metadata in Yaml
  - Org-based pages: about, programming languages, etc
  - better/fuller Nginx config (from the server)
  - HTML parsing, cssselector, xpath, etc
  - a few XSLT transforms
    - old-style header
    - new-style <my-header>
      - injecting last updated time
    - auto anchors for <h3>s
    - <my-img> - img + a + lightbox
    - <notice><note>aaa</note></notice> for additional notes at the top of the post
    - 
  - handling of footnotes
  - handling of markdown block
  - handling of code blocks with Python's Pygments
    - CSS for Pygments
  - RSS feed generation
  - archive page generation
  - next-gen posts handling
  - rendering Disqus comments on posts' pages
  - globally-unique anchors for headlines
  - remember to add <!DOCTYPE html> to the generated HTML
  - HTML-based posts and pages (not just Org)
  - ticks are replaced with <code> tags
